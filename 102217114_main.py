# -*- coding: utf-8 -*-
"""102217114-Main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13eGeTor72nOTvw06ca1l_ue6BExmAKao
"""

import numpy as np
import pandas as pd

# Function to generate random dataset
def generate_dataset(n_models=5, seed=42):
    np.random.seed(seed)

    models = [f"Model_{i+1}" for i in range(n_models)]

    # Generate random values for each metric
    perplexity = np.random.uniform(5, 20, n_models)  # Lower is better
    f1_score = np.random.uniform(0.7, 0.95, n_models)  # Higher is better
    response_coherence = np.random.uniform(0.6, 0.95, n_models)  # Higher is better
    latency = np.random.uniform(100, 300, n_models)  # Lower is better

    df = pd.DataFrame({
        'Model': models,
        'Perplexity': perplexity,
        'F1-score': f1_score,
        'Response Coherence': response_coherence,
        'Latency': latency
    })

    return df

# Function to apply TOPSIS
def topsis(df, weights):
    data = df.iloc[:, 1:].values  # Extract numeric data

    # Step 1: Normalize the data
    norm_data = data / np.sqrt((data ** 2).sum(axis=0))

    # Step 2: Multiply by weights
    weighted_data = norm_data * weights

    # Step 3: Identify ideal and negative-ideal solutions
    ideal_solution = np.max(weighted_data, axis=0)  # Best values
    negative_ideal_solution = np.min(weighted_data, axis=0)  # Worst values

    # Step 4: Compute distances
    dist_ideal = np.sqrt(((weighted_data - ideal_solution) ** 2).sum(axis=1))
    dist_negative_ideal = np.sqrt(((weighted_data - negative_ideal_solution) ** 2).sum(axis=1))

    # Step 5: Compute TOPSIS Score
    topsis_score = dist_negative_ideal / (dist_ideal + dist_negative_ideal)

    df["TOPSIS Score"] = topsis_score
    df = df.sort_values(by="TOPSIS Score", ascending=False).reset_index(drop=True)

    return df

# Generate dataset
df = generate_dataset(n_models=7)

# Define weights (higher weight = more importance)
weights = np.array([0.4, 0.2, 0.3, 0.1])

# Convert Perplexity and Latency to negative criteria (lower is better)
df["Perplexity"] = 1 / df["Perplexity"]
df["Latency"] = 1 / df["Latency"]

# Apply TOPSIS
result_df = topsis(df, weights)

# Display results
print(result_df)